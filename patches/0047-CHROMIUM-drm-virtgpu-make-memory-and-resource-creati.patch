From e0e80ff97418675662fe57869975cf4bd7afad0f Mon Sep 17 00:00:00 2001
From: Gurchetan Singh <gurchetansingh@google.com>
Date: Mon, 21 Sep 2020 21:57:15 -0700
Subject: [PATCH 47/61] CHROMIUM: drm/virtgpu: make memory and resource
 creation opaque

It's not necessary for the guest kernel to know about parameters
such as width, height, format, or queue indices (Vulkan).

BUG=chromium:924405
TEST=compile

Change-Id: I8944e78ceff8987ce0c4e89fb9f9bc07ebdb7dcb
Reviewed-on: https://chromium-review.googlesource.com/c/chromiumos/third_party/kernel/+/1702156
Reviewed-by: Robert Tarasov <tutankhamen@chromium.org>
Commit-Queue: Gurchetan Singh <gurchetansingh@chromium.org>
Tested-by: Gurchetan Singh <gurchetansingh@chromium.org>

Conflicts:
	include/uapi/linux/virtio_gpu.h

[rebase54(groeck): Context conflicts]
Signed-off-by: Guenter Roeck <groeck@chromium.org>

Rebase
Signed-off-by: Kalyan Kondapally <kalyan.kondapally@intel.com>
---
 include/uapi/linux/virtio_gpu.h | 83 +++++++++++++++++++++++++++++++++
 1 file changed, 83 insertions(+)

diff --git a/include/uapi/linux/virtio_gpu.h b/include/uapi/linux/virtio_gpu.h
index cc0ec5168fa2..1c1e946902e8 100644
--- a/include/uapi/linux/virtio_gpu.h
+++ b/include/uapi/linux/virtio_gpu.h
@@ -51,6 +51,19 @@
  */
 #define VIRTIO_GPU_F_EDID                1
 
+/*
+ * VIRTIO_GPU_CMD_ALLOCATION_METADATA
+ */
+#define VIRTIO_GPU_F_RESOURCE_V2         3
+/*
+ * Ability to turn guest pages into host buffers.
+ */
+#define VIRTIO_GPU_F_SHARED_GUEST        4
+/*
+ * Can inject host pages into guest.
+ */
+#define VIRTIO_GPU_F_HOST_COHERENT       5
+
 enum virtio_gpu_ctrl_type {
 	VIRTIO_GPU_UNDEFINED = 0,
 
@@ -78,6 +91,9 @@ enum virtio_gpu_ctrl_type {
 	VIRTIO_GPU_CMD_TRANSFER_TO_HOST_3D,
 	VIRTIO_GPU_CMD_TRANSFER_FROM_HOST_3D,
 	VIRTIO_GPU_CMD_SUBMIT_3D,
+	VIRTIO_GPU_CMD_RESOURCE_CREATE_V2,
+	VIRTIO_GPU_CMD_RESOURCE_CREATE_V2_UNREF,
+	VIRTIO_GPU_CMD_ALLOCATION_METADATA,
 
 	/* cursor commands */
 	VIRTIO_GPU_CMD_UPDATE_CURSOR = 0x0300,
@@ -106,8 +122,33 @@ enum virtio_gpu_ctrl_type {
 	VIRTIO_GPU_RESP_ERR_INVALID_RESOURCE_ID,
 	VIRTIO_GPU_RESP_ERR_INVALID_CONTEXT_ID,
 	VIRTIO_GPU_RESP_ERR_INVALID_PARAMETER,
+	VIRTIO_GPU_RESP_ERR_INVALID_MEMORY_ID,
 };
 
+enum virtio_gpu_memory_type {
+	VIRTIO_GPU_MEMORY_UNDEFINED = 0,
+
+	/*
+	 * Traditional virtio-gpu memory.
+	 * Has both host and guest side storage.
+	 *
+	 * VIRTIO_GPU_CMD_TRANSFER_* commands are used
+	 * to copy between guest and host storage.
+	 *
+	 * Created using VIRTIO_GPU_CMD_RESOURCE_CREATE_V2.
+	 */
+	VIRTIO_GPU_MEMORY_TRANSFER,
+	VIRTIO_GPU_MEMORY_SHARED_GUEST,
+	VIRTIO_GPU_MEMORY_HOST_COHERENT,
+};
+
+enum virtio_gpu_caching_type {
+	VIRTIO_GPU_UNDEFINED_CACHING = 0,
+	VIRTIO_GPU_CACHED,
+	VIRTIO_GPU_WRITE_COMBINE,
+	VIRTIO_GPU_UNCACHED,
+ };
+
 #define VIRTIO_GPU_FLAG_FENCE (1 << 0)
 
 struct virtio_gpu_ctrl_hdr {
@@ -149,6 +190,7 @@ struct virtio_gpu_rect {
 /* VIRTIO_GPU_CMD_RESOURCE_UNREF */
 struct virtio_gpu_resource_unref {
 	struct virtio_gpu_ctrl_hdr hdr;
+	/* memory_type is VIRTIO_GPU_MEMORY_TRANSFER */
 	__le32 resource_id;
 	__le32 padding;
 };
@@ -281,6 +323,47 @@ struct virtio_gpu_cmd_submit {
 	__le32 padding;
 };
 
+/* VIRTIO_GPU_CMD_RESOURCE_CREATE_V2 */
+struct virtio_gpu_resource_create_v2 {
+	struct virtio_gpu_ctrl_hdr hdr;
+	__le32 resource_id;
+	__le32 guest_memory_type;
+	__le32 caching_type;
+	__le32 pad;
+	__le64 size;
+	__le64 pci_addr;
+	__le32 args_size;
+	__le32 nr_entries;
+	/* ('nr_entries' * struct virtio_gpu_mem_entry) + 'args_size'
+	 * bytes follow here.
+	 */
+};
+
+/* VIRTIO_GPU_CMD_RESOURCE_CREATE_V2_UNREF */
+struct virtio_gpu_resource_v2_unref {
+	struct virtio_gpu_ctrl_hdr hdr;
+	__le32 resource_id;
+	__le32 padding;
+};
+
+/* VIRTIO_GPU_CMD_RESOURCE_CREATE_V2 */
+struct virtio_gpu_allocation_metadata {
+	struct virtio_gpu_ctrl_hdr hdr;
+	__le32 request_id;
+	__le32 pad;
+	__le32 request_size;
+	__le32 response_size;
+	/* 'request_size' bytes go here */
+};
+
+/* VIRTIO_GPU_RESP_OK_ALLOCATION_METADATA */
+struct virtio_gpu_resp_allocation_metadata {
+	struct virtio_gpu_ctrl_hdr hdr;
+	__le32 request_id;
+	__le32 response_size;
+	/* 'response_size' bytes go here */
+};
+
 #define VIRTIO_GPU_CAPSET_VIRGL 1
 #define VIRTIO_GPU_CAPSET_VIRGL2 2
 
-- 
2.25.1

